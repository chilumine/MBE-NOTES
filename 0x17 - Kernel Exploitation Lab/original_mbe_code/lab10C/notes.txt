 24 unsigned int secret;          <--- secret?

 26 typedef struct key_material {
 27     char key[1024];           <--- 1024 key buffer
 28     void (*algo)(char *);     <--- function pointer
 29     int auth;
 30 }da_keyz;

 33 struct key_material * sekret; <-- structure created

 99 static int __init mod_init(void) <--- main function
100 {
101     int ret;
102     // Register Device to /dev
103     ret = misc_register(&pwn_dev);
104 
105     // Allocate Space for the key 
106     sekret = kmalloc(sizeof(struct key_material), GFP_KERNEL);
107     get_random_bytes(&sekret->key, 1024);
108 
109     // Set the algorithm to a sane default
110     sekret->algo = algo_xor;
111 
112     printk(KERN_INFO "Finished Init\n");
113     printk(KERN_INFO "Can u get r00t?\n");
114     return 0;
115 }

 60 static const struct file_operations pwnops = {
 61     .owner  = THIS_MODULE,
 62     .write  = pwn_write,
 63 };

 65 static struct miscdevice pwn_dev = {
 66     MISC_DYNAMIC_MINOR, # the minor number registered, every misc device must feature different minor number /dev
       "pwn", # name for this device meant for humans can be found in /proc/misc
       &pwnops # pointer to the file operations which must be used to act on the device
 67 };

 69 void algo_xor(char * buf) {
 70 /*
 71     Secure One-Time Pad Authentication Function.
 72 */
 73     int i;
 74     int sum;
 75 
 76     sum = 0;
 77     printk(KERN_INFO "Inside algo_xor!\n");
 78 
 79     for(i=0; i <= 1024; i++) {
 80         sekret->key[i] ^= buf[i];
 81     }
 82 
 83    for(i=0; i <= 1024; i++) {
 84         sum += sekret->key[i];
 85     }
 86 
 87     if(sum == 0) {
 88         sekret->auth = 1;
 89     }
 90     else {
 91         printk(KERN_INFO "Authentication Failed!\n");
 92       memset(sekret, 0 , sizeof(struct key_material));
 93       get_random_bytes(&(sekret->key),1024);
 94     }
 95     return;
 96 }

 33 struct key_material * sekret;
 34 
 35 static ssize_t pwn_write(struct file* file, const char * buf, size_t count, loff_t *ppos)
 36 { // Here we check for the password
 37     
 38     printk(KERN_INFO "%s\n",buf);
 39     if( count == 0x31337) {
 40         if (sekret->auth) {
 41        // Do the root thing here.
 42        printk(KERN_INFO "Nice privs bro.\n");
 43         }
 44   return 0x31337;
 45     }
 46     
 47     if(buf[0] == '\x01') {
 48         printk("Flag is @ /root/flag");
 49     }
 50     
 51     if ( ( *(unsigned int *)buf ^ 0xcafebabe) == 0) {
 52         printk(KERN_INFO "Performing Key Authentication now...\n");
 53   sekret->algo(buf);
 54     }
 55     
 56     return count;
 57 }
